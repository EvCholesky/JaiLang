/*
test BytecodeInferAlloc
	input "n := ?val"
	bytecode "{?val;}"
	{
		?val(24|5|"-66")
	}

test BytecodeAlloc
	input "n:s32; n = ?val"
	bytecode "{?val;}"
	{
		?val(24|5|"-66")
	}

test BytecodePointer
	input "n:s32; pN : &s32; pN = &n; @pN = ?val; n2 := n"
	bytecode "{&0;?val;?val;}"
	{
		?val(24|5|"-66")
	}

test BytecodeCompare
	input "n := ?init; if n < ?cmp { n = ?a } else { n = ?b }"
	bytecode "{?init;?res;}"
	{
		?init(2) + ?cmp(100) + ?a(1) + ?b(-1) + ?res(1),
		?init(5000) + ?cmp(100) + ?a(1) + ?b(-1) + ?res(-1),
		?init(10.000000) + ?cmp(100.0) + ?a(1.0) + ?b(-1.00000) + ?res(1.000000),
		?init(5000.000000) + ?cmp(100.0) + ?a(1.0) + ?b(-1.00000) + ?res(-1.000000),
	}

test BytecodeBool
	input "f:bool = ?init"
	bytecode "{?init;}"
	{
		?init(true|false)
	}

test BytecodeWhile
	input "n := 3; while(n >= 0) { n = n - 1 }"
	bytecode "{3;2;1;0;-1;}"

test BytecodeWhile
	input "for n:= 0; n < 3; n = n + 1; { }"
	bytecode "{0;1;2;3;}"
test BytecodeProcCall
	prereq "sum proc(a: int, b: int, pN: & int)->int {return a+b}"
	input "sum(5, 8, null)"
	bytecode "{sum(5, 8, null){}->13; }"
test BytecodeProcCallRecurse
	prereq "recurse proc(a: int) { if a>0 {recurse(a-1)} }"
	input "recurse(3)"
	bytecode "{recurse(3){recurse(2){recurse(1){recurse(0){}; }; }; }; }"

test BytecodeProcCallByRef
	prereq "retproc proc(a: int)->int { return a }"
	input "pFn := retproc; pFn(1234)"
	bytecode "{retproc(int)->int;retproc(1234){}->1234; }"

test BytecodeArray
	input "a : [3] ?type; a[2] = ?val"
	bytecode "{?val;}"
	{
		?type(int) + ?val(123),
		?type(float) + ?val(123.000000)
	}

test BytecodeArrayAccess
	input "{a := {:?type: 1, 2, 3}; n := a[2] }"
	bytecode "{3;}"
	{
		?type(int),
		?type(s16),
	}

test BytecodeArrayLoop
	prereq "a := {:?type: 11, 22, 33, 44 }"
	input "for i := 0; i<a.count; ++i; { n := a[i] }"
	bytecode "{0;11;22;33;44;}"
	{
		?type(int),
		?type(s16),
	}

test BytecodeString
	input "pChz := \"teststring\""
	bytecode "{&116;}"
	{
		?type(int),
	}

test BytecodeStruct
	prereq "SFoo struct { m_a: u8; m_b: int}"
	input "foo: SFoo; a2 := foo.m_a; b2 := foo.m_b"
	bytecode "{0;0;}"
	{
		?type(int),
	}

test BytecodeInit
	prereq "SFoo struct { m_a: u8 = 100; m_b: int = 200}"
	input "foo: SFoo; a2 := foo.m_a; b2 := foo.m_b"
	bytecode "{100;200;}"
	{
		?type(int),
	}

test BytecodeNestedProcInit
	prereq "SFoo struct { m_a: u8 = ---; m_b: int = 200} SOuter struct {m_un: int = ---; m_foo: SFoo}"
	input "out: SOuter; a2 := out.m_foo.m_a; b2 := out.m_foo.m_b"
	bytecode "{0;200;}"
	{
		?type(int),
	}

test BytecodeStructArray
	prereq "SFoo struct { m_a: u8 = 100; m_un: int = ---; m_b: int = 200}"
	input "aFoo: [4] SFoo; a2 := aFoo[1].m_a; b2 := aFoo[1].m_b"
	bytecode "{100;200;}"
	{
		?type(int),
	}

test BytecodeStructArray
	prereq "SFoo struct { m_a: u8 = 100; m_un: int = ---; m_b: int = 200}; SBar struct { m_aFoo: [3] SFoo }"
	input "bar: SBar; a2 := bar.m_aFoo[1].m_a; b2 := bar.m_aFoo[1].m_b"
	bytecode "{__SBar_INIT(){}; 100;200;}"
	{
		?type(int),
	}

test BytecodeStructZero
	prereq "SFoo struct { m_a: int }; SBar struct {m_foo: SFoo; m_n: int = ---}"
	input "bar: SFoo"
	bytecode "{}"
	{
		?type(int),
	}

test BytecodeStructZero
	prereq "SFoo struct {m_a: [] u8 }"
	input "foo: SFoo"
	bytecode "{}"
	{
	}
test BytecodeStructZero
	prereq "x := ?xval; y := ?yval"
	input "f := x ?op y"
	bytecode "{?xval;?yval;?output;}"
	{
		?xval(0) + ?yval(0) + ?op("&&") + ?output(false),
		?xval(1) + ?yval(0) + ?op("&&") + ?output(false),
		?xval(1) + ?yval(1) + ?op("&&") + ?output(true),
		?xval(0) + ?yval(0) + ?op("||") + ?output(false),
		?xval(1) + ?yval(0) + ?op("||") + ?output(true),
		?xval(1) + ?yval(1) + ?op("||") + ?output(true),
	}

test BytecodeCast
	prereq "src: ?srctype = ?in"
	input  "dst := cast(?dsttype) src"
	bytecode  "{?in;?out;}"
	{
		?srctype(s64|s32|s16|s8) + ?dsttype(s8|s16|s32|s64) + ?in(123|-123) + ?out("?in"),
		?srctype(s8) + ?dsttype(u64|u8) + ?in(-1) + ?out(255),
		?srctype(s16) + ?dsttype(u64|u16) + ?in(-1) + ?out(65535),
		?srctype(f32|f64) + ?dsttype(s32) + ?in(-123.000000) + ?out(-123),
		?srctype(s8|s16|s32) + ?dsttype(f32|f64) + ?in(-123) + ?out(-123.000000),
		?srctype(f32) + ?dsttype(f64) + ?in(-123.000000) + ?out("?in"),
		?srctype(f64) + ?dsttype(f32) + ?in(-123.000000) + ?out("?in"),
		?srctype(u64) + ?in(4294967295)
		{
			?dsttype(u8) + ?out(255),
			?dsttype(u16) + ?out(65535),
			?dsttype(u32) + ?out("?in"),
		},
	}

test BytecodeShift	
	prereq "src: ?srctype = ?val"
	input  "dst := src ?shift ?cbits"
	bytecode  "{?val;?out;}"
	{
		?srctype(s64|s32|s16|s8|u64|u32|u16|u8) + ?shift(">>") + ?val(12) + ?cbits(1) + ?out(6),
		?srctype(s32|u32) + ?shift(">>") + ?val(12) + ?cbits(2) + ?out(3),
		?srctype(s64|s32|s16|s8) + ?shift(">>") + ?val(-1) + ?cbits(3) + ?out(-1),
		?srctype(s64|s32|s16|s8|u64|u32|u16|u8) + ?shift("<<") + ?val(7) + ?cbits(2) + ?out(28),
	}
*/
test BytecodeBitwiseOps
	prereq "a : ?type = ?aval; b : ?type = ?bval"
	input "c := a ?op b"
	bytecode "{?aval;?bval;?out;}"
	{
		?type(s64|s32|s16|s8) + ?aval(3) + ?bval(8) + ?op("|") + ?out(11),
		?type(s64|s32|s16|s8) + ?aval(3) + ?bval(7) + ?op("&") + ?out(3),
		?type(s64|s32|s16|s8) + ?aval(3) + ?bval(6) + ?op("^") + ?out(5),
	}

	// To Test:
	// To Test:
	// [ ] fdir.m_top should be a boolean value as an rvalue or a lvalue
	// [x] flag lvalues only support assignment, no address of or other assignment ops
	// [ ] Cannot declare internal use type "_flag"
	// [ ] Errors are generated on shadowing of global type type symbols (declarations, typedefs)
	// [ ] assigning flag value via pointer to instance (pFbit.A = true)

