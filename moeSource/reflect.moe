#import "basic"

TINK enum s8
{
    Integer: 	0,
    Float: 		1,
    Bool: 		2,		// no specialized type info
    Pointer: 	3,
    Procedure: 	4,
    Void: 		5,		// no specialized type info
    Struct: 	6,
    Array:		7,
    Null:		8,		// no specialized type info
    Any:		9,		// no specialized type info
    Enum:		10,
}

STypeInfo struct // tag = pTin
{
    m_tink: TINK
}

STypeInfoInteger struct // tag = pTinint
{
	m_tin: STypeInfo

	m_fIsSigned: bool
	m_cBit: u32
}

STypeInfoFloat struct // tag = pTinfloat
{
	m_tin: STypeInfo

	m_cBit: u32
}

STypeInfoPointer struct	// tag = tinptr
{
	m_tin: STypeInfo
	
	m_pTinPointedTo: & STypeInfo
}

INLINEK enum s8
{
	AlwaysInline,
	NoInline,
}

CALLCONV enum s8
{
	CX86,
	StdCallX86,
	X64,
}

STypeInfoProcedure struct // tag = tinproc
{
	m_tin: STypeInfo 

    m_arypTinParams : [] & STypeInfo
    m_arypTinReturns: [] & STypeInfo

    m_fHasVarArg: bool
    m_inlinek: INLINEK
   	m_callconv: CALLCONV
}

STypeInfoStruct struct
{
	m_tin: STypeInfo	
    m_aryMembers : [] STypeInfoMember

	m_pCozName: & u8
}

STypeInfoMember struct
{
	m_pCozName: & u8
	m_pTin: & STypeInfo
	m_iB: sSize				// offset in bytes fro the start of the structure
}

ARYK enum s8
{
	Fixed,					// c-style fixed size array.			aN : [3] int;
    Dynamic,				// dynamically resizing array.			aN : [..] int;
    Reference,				// reference to array of either type.	aN : [] int;
}

STypeInfoArray struct
{
	m_tin: STypeInfo	

	m_pTinElement: & STypeInfo
	m_aryk: ARYK
	m_cElement: sSize 		// number of elements, -1 if not fixed array
}

STypeInfoEnum struct
{
	m_tin: STypeInfo	
	m_pTinLoose: & STypeInfo

	// TBD - how did we handle standard constants
}

Any struct
{
	m_pTin: & STypeInfo
	m_pV: & void
}

_tinTable: [] & STypeInfo

PrintTypeInfo proc (pTin: & STypeInfo, fIsTopLevel: bool)
{
	if fIsTopLevel
	{
		if pTin.m_tink == TINK.nil
		{
			printf("nil: ")
		}
		else
		{
			printf("%s: ", TINK.names[pTin.m_tink])
		}
	}

	if pTin.m_tink == TINK.Integer
	{
		pTinint := cast(& STypeInfoInteger)pTin

		pChzSigned := "u"
		if pTinint.m_fIsSigned
		{
			pChzSigned = "s"
		}

		printf("%s%d", pChzSigned, pTinint.m_cBit)
	}
	else if pTin.m_tink == TINK.Float
	{
		pTinfloat := cast(& STypeInfoFloat)pTin
		printf("f%d", pTinfloat.m_cBit)

	}
	else if pTin.m_tink == TINK.Pointer
	{
		pTinptr := cast(& STypeInfoPointer)pTin
		printf("& ")

		PrintTypeInfo(pTinptr.m_pTinPointedTo, false)
	}

	if fIsTopLevel
	{
		printf("\n")
	}
}