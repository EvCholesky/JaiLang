#import "Basic"
#import "Color"
#import "Font"
#import "GL"
#import "Math"

g_dXWindow :: 1280
g_dYWindow :: 720
g_cTickPerSecond: s64 = 1

g_pChzMap :: #string END
WWWWWWWWWW.WWWWWWWWWW
Wo......W...W......oW
W.WWWWW.W.W.W.WWWWW.W
W.........W.........W
W.WWW.WWW.W.WWW.WWW.W
W.W...W...........W.W
W...W...WWWWW.W.W...W
WWW.W.W.Wg.gW.W.WWWWW
p...W.W...W...W......
WWW.W.W.Wg.gW.W.WWWWW
W...W...WWWWW.W.W...W
W.W...W...........W.W
W.WWW.WWW.W.WWW.WWW.W
W.........W.........W
W.WWWWW.W.W.W.WWWWW.W
Wo......W...W......oW
WWWWWWWWWW.WWWWWWWWWW
END

g_dXCell :: 35
g_dYCell :: 35
g_dXCellHalf : float : (g_dXCell / 2.0)
g_dYCellHalf : float : (g_dYCell / 2.0)

g_dXMapCell :: 21
g_dYMapCell :: 17

g_dXyPuckSpeed :: 100
g_gInputWindow :: 50

g_pActPuck: & SActor
g_pActBlinky: & SActor	// global blinky reference, needed for inky's behavior

DIR enum u8
{
	Left,
	Up,
	Right,
	Down
}

FDIR enum u8
{
	Left: 	0x1,
	Up:		0x2,
	Right:	0x4,
	Down:	0x8,

	none:	0x0,
	all: 	0xF,
}

GRFDIR typedef FDIR.loose

Syst typedef f64

g_systCur: f64

SystCur proc () -> Syst
{
	return g_systCur	
}

SMapDimensions struct // tag = mapdim
{
	m_dXCellMax: s32
	m_dYCellMax: s32
	m_dXStride: s32
}	

SMapInfo struct // mapinfo
{
	m_mapdim: SMapDimensions
	m_aChMap: & u8
}

g_mapinfo: SMapInfo

PosFromCell proc (posCell: s32x2) -> f32x2
{
	return F32x2Create(cast (f32) posCell.m_x * g_dXCell + g_dXCellHalf, cast (f32) posCell.m_y * g_dYCell + g_dYCellHalf)
}

FIsCellBlocked proc (xCell: int, yCell: int) -> bool
{
	if (xCell < 0) | (xCell >= g_mapinfo.m_mapdim.m_dXCellMax) | (yCell < 0) | (yCell >= g_mapinfo.m_mapdim.m_dYCellMax)
	{
		return true
	}

	ch := g_mapinfo.m_aChMap[xCell + yCell * g_mapinfo.m_mapdim.m_dXStride]

	return ch == 'W'
}

GrfdirOpenCells proc(posCell: s32x2) -> GRFDIR
{
	dXCellMax := g_mapinfo.m_mapdim.m_dXCellMax
	dYCellMax := g_mapinfo.m_mapdim.m_dYCellMax

	grfdir: GRFDIR
	if !FIsCellBlocked(posCell.m_x - 1, posCell.m_y) || (posCell.m_x == 0 && !FIsCellBlocked(dXCellMax-1, posCell.m_y))
		{ grfdir |= FDIR.Left }
	if !FIsCellBlocked(posCell.m_x + 1, posCell.m_y) || (posCell.m_x == dXCellMax-1 && !FIsCellBlocked(0, posCell.m_y))
		{ grfdir |= FDIR.Right }

	if !FIsCellBlocked(posCell.m_x, posCell.m_y + 1) || (posCell.m_y == dYCellMax-1 && !FIsCellBlocked(posCell.m_x, 0))
		{ grfdir |= FDIR.Up }
	if !FIsCellBlocked(posCell.m_x, posCell.m_y - 1) || (posCell.m_y == 0 && !FIsCellBlocked(posCell.m_x, dYCellMax-1))
		{ grfdir |= FDIR.Down }

	return grfdir
}

DirRandom proc (grfdir: GRFDIR) -> DIR
{
	cDir: s32 = 0
	for dir := DIR.min; dir < DIR.max; ++dir
	{
		if grfdir & (0x1 << dir) == 0
			{ continue }
		++cDir
	}
	
	iDir := NRandom(&g_rng, 0, cDir)

	for dir := DIR.min; dir < DIR.max; ++dir
	{
		if grfdir & (0x1 << dir) == 0
			{ continue }
		if iDir == 0
			{ return dir}
		--iDir
	}

	assert(false, "failed to generate random dir", #file, #line)
	return DIR.min
}

DirFromVec proc (vec: f32x2) -> DIR
{
	if GAbs(vec.m_x) > GAbs(vec.m_y)
	{
		if vec.m_x >= 0
			{ return DIR.Right }
		return DIR.Left
	}

	if vec.m_y >= 0
		{ return DIR.Up }
	return DIR.Down
}

VecFromDir proc(dir: DIR) -> f32x2
{
	mpDirXy :=
	{:float:
		-1, 0, 	//Left,
		0,	1, 	//Up,
		1,	0,	//Right,
		0,	-1	//Down
	}

	iXy := cast(int)dir * 2
	return F32x2Create(mpDirXy[iXy], mpDirXy[iXy+1])
}

FTryFindCellNearest proc (posCellCur: s32x2, posTarget: f32x2, grfdir: GRFDIR, pPosCellNearest: & s32x2) -> bool
{
	SetNearest proc (posCellCur: s32x2, dPosCell: s32x2, posTarget: f32x2, pGNearest:& f32, pPosCellNearest : & s32x2)
	{
		posCellCur = posCellCur + dPosCell

		posA := PosFromCell(posCellCur)
		dPos := posTarget - posA
		dXMax := cast(f32)g_mapinfo.m_mapdim.m_dXCellMax * g_dXCell
		dYMax := cast(f32)g_mapinfo.m_mapdim.m_dYCellMax * g_dYCell
		if dPos.m_x > dXMax * 0.5
			{ dPos.m_x = dXMax - dPos.m_x }
		if dPos.m_y > dYMax * 0.5
			{ dPos.m_y = dYMax - dPos.m_y }

		gDist := GLength(dPos)

		if gDist < @pGNearest
		{
			@pGNearest = gDist
			@pPosCellNearest = posCellCur
		}
	}

	gNearest: f32 = F32_MAX
	posCellNearest: s32x2 = ---

	if grfdir & FDIR.Left
	{
		SetNearest(posCellCur, S32x2Create(-1, 0), posTarget, &gNearest, &posCellNearest)
	}
	if grfdir & FDIR.Right
	{
		SetNearest(posCellCur, S32x2Create(1, 0), posTarget, &gNearest, &posCellNearest)
	}

	if grfdir & FDIR.Up
	{
		SetNearest(posCellCur, S32x2Create(0, 1), posTarget, &gNearest, &posCellNearest)
	}
	if grfdir & FDIR.Down
	{
		SetNearest(posCellCur, S32x2Create(0, -1), posTarget, &gNearest, &posCellNearest)
	}

	if (gNearest < F32_MAX)
	{
		@pPosCellNearest = posCellNearest
		return true
	}
	return false
}

SetGhosts proc (pAct: & SActor, ghostsNew: GHOSTS)
{
	// leaving state

	pAct.m_ghosts = ghostsNew
	pAct.m_systState = SystCur()

	SetGhostColor(pAct)

	// entering state

	switch ghostsNew
	{
		case GHOSTS.Fright:

			// we're headed back towards the cell we just left, let the update code decide what to do there

			posCellCur: s32x2
			posCellNext: s32x2
			FindPrevNextCell(pAct.m_pEnt.m_pos, pAct.m_vAfter, &posCellCur, &posCellNext)

			pAct.m_posCellGoal = posCellCur
			pAct.m_posCellGoal = PosCellWrap(pAct.m_posCellGoal)
			
			pAct.m_vAfter = -pAct.m_vAfter
	}

}

SetPucks proc (pAct: & SActor, pucksNew: PUCKS)
{
	pAct.m_pucks = pucksNew
	pAct.m_systState = SystCur()
}

VecShortestWrappingDPos proc (posSrc: f32x2, posDst: f32x2) -> f32x2
{
	dXMap:= cast(f32)g_mapinfo.m_mapdim.m_dXCellMax * g_dXCell
	dYMap:= cast(f32)g_mapinfo.m_mapdim.m_dYCellMax * g_dYCell
	dXHalfMap := dXMap * 0.5
	dYHalfMap := dYMap * 0.5

	posWrapX := posDst
	if posWrapX.m_x < dXHalfMap
		{ posWrapX.m_x += dXMap }
	else if posWrapX.m_x > dXHalfMap
		{ posWrapX.m_x -= dXMap }

	posWrapY := posDst
	if posWrapY.m_y < dYHalfMap
		{ posWrapY.m_y += dYMap }
	else if posWrapY.m_y > dYHalfMap
		{ posWrapY.m_y -= dYMap }

	dPosFull := posDst - posSrc
	dPosWrapX := posWrapX - posSrc
	sWrapX := GLength(dPosWrapX)
	dPosWrapY := posWrapY - posSrc
	sWrapY := GLength(dPosWrapY)

	if GLengthSqr(dPosWrapX) < GLengthSqr(dPosFull)
	{ 
		posDst = dPosWrapX
		dPosFull = dPosWrapX
	}

	if GLengthSqr(dPosWrapY) < GLengthSqr(dPosFull)
		{ return dPosWrapY }
	return dPosFull
}

PosWrap proc (pos: f32x2) -> f32x2
{
	dXMap:= cast(f32)g_mapinfo.m_mapdim.m_dXCellMax * g_dXCell
	dYMap:= cast(f32)g_mapinfo.m_mapdim.m_dYCellMax * g_dYCell

	// mirror position if outside bounds
	if pos.m_x < 0
		{ pos.m_x += dXMap}
	if pos.m_x >= dXMap
		{ pos.m_x -= dXMap }

	if pos.m_y < 0
		{ pos.m_y += dYMap }
	if pos.m_y >= dYMap
		{ pos.m_y -= dYMap }
	return pos
}

PosCellWrap proc (posCell: s32x2) -> s32x2
{
	dXCellMax := g_mapinfo.m_mapdim.m_dXCellMax
	dYCellMax := g_mapinfo.m_mapdim.m_dYCellMax

	// mirror position if outside bounds
	if posCell.m_x < 0
		{ posCell.m_x += dXCellMax}
	if posCell.m_x >= dXCellMax
		{ posCell.m_x -= dXCellMax }

	if posCell.m_y < 0
		{ posCell.m_y += dYCellMax }
	if posCell.m_y >= dYCellMax
		{ posCell.m_y -= dYCellMax }
	return posCell
}

UpdateGhosts proc (pActGhost: & SActor, dT: float)
{
	ghostsPrev := GHOSTS.nil
	while (pActGhost.m_ghosts != ghostsPrev)
	{
		switch pActGhost.m_ghosts
		{
			case GHOSTS.Wait:
				if (g_pActPuck.m_cCoin > pActGhost.m_cCoinWait)
				{
					SetGhosts(pActGhost, GHOSTS.Chase)
				}
			case GHOSTS.Chase:
				UpdateGhostsChase(pActGhost, dT)
			case GHOSTS.Fright: 
				UpdateGhostsFright(pActGhost, dT)
		}

		ghostsPrev = pActGhost.m_ghosts
	}

	UpdateGhostsChase proc (pActGhost: & SActor, dT: float)
	{
		if (g_pActPuck.m_pucks == PUCKS.Eating)
		{
			SetGhosts(pActGhost, GHOSTS.Fright)
			return
		}

		// update the 'brain' cell

		pActGhost.m_fHasBrain = true
		switch pActGhost.m_ghostk
		{
			case GHOSTK.Blinky:
				pActGhost.m_posCellBrain = g_pActPuck.m_posCellGoal
			case GHOSTK.Pinky:
				dPosCell := VecSign(g_pActPuck.m_vAfter) * 4
				pActGhost.m_posCellBrain = g_pActPuck.m_posCellGoal + dPosCell
			case GHOSTK.Inky:
				dPosCell := VecSign(g_pActPuck.m_vAfter) * 2
				posCellLead := g_pActPuck.m_posCellGoal + dPosCell

				posCellCross := pActGhost.m_posCellGoal
				if (g_pActBlinky)
				{
					posCellCross = g_pActBlinky.m_posCellGoal
				}

				vecToLead := posCellLead - posCellCross
				pActGhost.m_posCellBrain = posCellLead + vecToLead
			case GHOSTK.Clyde:
				vecToPuck := g_pActPuck.m_posCellGoal - pActGhost.m_posCellGoal
				nLengthSqr := vecToPuck.m_x * vecToPuck.m_x + vecToPuck.m_y * vecToPuck.m_y
				if nLengthSqr > 64
				{
					pActGhost.m_posCellBrain = g_pActPuck.m_posCellGoal
				}
				else
				{
					pActGhost.m_posCellBrain = S32x2Create(0, 0)
				}
		}

		//DrawCellDebug(pActGhost.m_posCellBrain, pActGhost.m_pEnt.m_col)

		UpdateActorMovement(pActGhost, dT)
	}

	UpdateGhostsFright proc  (pActGhost: & SActor, dT: float)
	{
		dTState := SystCur() - pActGhost.m_systState
		if (dTState > kDtEating)
		{
			SetGhosts(pActGhost, GHOSTS.Chase)
			return
		}

		pEnt := pActGhost.m_pEnt
		gStep := g_dXyPuckSpeed * dT

		while gStep > gEpsilon
		{
			pPosCellGoal := &pActGhost.m_posCellGoal
			assert( pPosCellGoal.m_x >= 0 && pPosCellGoal.m_x < g_mapinfo.m_mapdim.m_dXCellMax &&
					pPosCellGoal.m_y >= 0 && pPosCellGoal.m_y < g_mapinfo.m_mapdim.m_dYCellMax, "bad cell position", #file, #line)

			//DrawCellDebug(@pPosCellGoal, ColCreate(255,150, 0,200))

			posCell := PosFromCell(@pPosCellGoal)	
			vecToCell := VecShortestWrappingDPos(pEnt.m_pos, posCell)
			//vecToCell := posCell - pEnt.m_pos
			sToCell := GLength(vecToCell)


			if sToCell > gStep
			{
				normToCell := vecToCell * (1.0 / sToCell)
				pEnt.m_pos = pEnt.m_pos + normToCell * gStep
				pEnt.m_pos = PosWrap(pEnt.m_pos)
				gStep = 0
			}
			else
			{
				pEnt.m_pos = posCell
				gStep -= sToCell

				assert(!FIsCellBlocked(pPosCellGoal.m_x, pPosCellGoal.m_y), "bad cur cell", #file, #line)
				assert( pPosCellGoal.m_x >= 0 && pPosCellGoal.m_x < g_mapinfo.m_mapdim.m_dXCellMax &&
						pPosCellGoal.m_y >= 0 && pPosCellGoal.m_y < g_mapinfo.m_mapdim.m_dYCellMax, "bad cell position", #file, #line)

				grfdir := GrfdirOpenCells(pActGhost.m_posCellGoal)
				grfdirTemp := grfdir

				dirIncoming := DirFromVec(-pActGhost.m_vAfter)
				grfdir &= FDIR.all ^ (0x1 << dirIncoming)

				dir:DIR = dirIncoming
				if fverify(grfdir != 0, "bad direction calculation", #file, #line)
				{ 
					dir = DirRandom(grfdir) 
				}

				vdir := VecFromDir(dir)

				pPosCellGoal.m_x += cast(s32)vdir.m_x
				pPosCellGoal.m_y += cast(s32)vdir.m_y
				@pPosCellGoal = PosCellWrap(@pPosCellGoal)
				assert( pPosCellGoal.m_x >= 0 && pPosCellGoal.m_x < g_mapinfo.m_mapdim.m_dXCellMax &&
						pPosCellGoal.m_y >= 0 && pPosCellGoal.m_y < g_mapinfo.m_mapdim.m_dYCellMax, "bad cell position", #file, #line)

				pActGhost.m_vAfter = vdir * g_dXyPuckSpeed
			}
		}

	}
}

FindPrevNextCell proc (pos: f32x2, vel: f32x2, pPosCellCur: & s32x2, pPosCellNext: & s32x2)
{
	if GAbs(vel.m_x) > GAbs(vel.m_y)
	{
		iY := NRound((pos.m_y - g_dYCellHalf) / g_dYCell)

		iXLower := NTrunc((pos.m_x + gEpsilon - g_dXCellHalf) / g_dXCell)
		if vel.m_x < 0
		{
			@pPosCellNext = S32x2Create(iXLower, iY)
			@pPosCellCur = S32x2Create(iXLower + 1, iY)
		}
		else
		{
			@pPosCellCur = S32x2Create(iXLower, iY)
			@pPosCellNext = S32x2Create(iXLower + 1, iY)
		}
	}
	else
	{
		iYLower := NTrunc((pos.m_y + gEpsilon - g_dYCellHalf) / g_dYCell)
		iX := NRound((pos.m_x - g_dXCellHalf) / g_dXCell)
		if vel.m_y < 0
		{
			@pPosCellNext = S32x2Create(iX, iYLower)
			@pPosCellCur = S32x2Create(iX, iYLower + 1)
		}
		else
		{
			@pPosCellCur = S32x2Create(iX, iYLower)
			@pPosCellNext = S32x2Create(iX, iYLower + 1)
		}
	}
}

SetGhostColor proc (pAct: & SActor)
{
	pEnt := pAct.m_pEnt
	if (pAct.m_ghosts == GHOSTS.Fright)
	{
						
		pEnt.m_col = ColCreate(30, 30, 120, 255)
		return
	}

	aNGhostColor := {:u8: 	152, 50, 62, 255,
							221, 145, 152, 255,
							31, 91, 152, 255,
							223, 174, 138, 255 }

	iNCol := cast (int)pAct.m_ghostk * 4
	pEnt.m_col = ColCreate(aNGhostColor[iNCol], aNGhostColor[iNCol+1], aNGhostColor[iNCol+2], aNGhostColor[iNCol+3])

	if (pAct.m_ghosts == GHOSTS.Wait)
	{
		colBlack := ColCreate(0, 0, 0, 255)
		pEnt.m_col = ColLerp(pEnt.m_col, colBlack, 0.4)
	}
}

UpdateActors proc (aAct: [] SActor, pPlayinp: & SPlayerInput, dT: f32)
{
	for iAct := 0; iAct < aAct.count; ++iAct	
	{
		pAct := &aAct[iAct]
		if !pAct.m_fIsAllocated
			{ continue }

		pEnt := pAct.m_pEnt
		switch pEnt.m_entk
		{
		case ENTK.Puck:
			UpdatePuck(pAct, pPlayinp, dT)

		case ENTK.Ghost:
			UpdateGhosts(pAct, dT)
		}
	}

}

DrawCellDebug proc (posCell: s32x2, col: SColor)
{
	// draw goal
	xMin := cast (f32) posCell.m_x * g_dXCell
	yMin := cast (f32) posCell.m_y * g_dYCell
	colvec := ColvecFromCol(col)
	AppendTile (xMin, yMin, xMin+g_dXCell, yMin+g_dXCell, &colvec, &g_tilbuf)
}

UpdatePucks proc (pActPuck: & SActor)
{
	switch (pActPuck.m_pucks)
	{
		case PUCKS.Eating:
		{
			dTState := SystCur() - pActPuck.m_systState
			if dTState > kDtEating
			{
				SetPucks(pActPuck, PUCKS.Normal)	
			}
		}
	}
}

UpdatePuck proc (pActPuck: & SActor, pPlayinp: & SPlayerInput, dT: f32)
{
	UpdatePuckInput(pActPuck, pPlayinp)
	UpdateActorMovement(pActPuck, dT)
	UpdatePucks(pActPuck)

	UpdatePuckInput proc (pActPuck: & SActor, pPlayinp: & SPlayerInput)
	{
		if pPlayinp.m_mpButkEdges[BUTK.Right] == EDGES.Press
		{ 
			pActPuck.m_vInput = F32x2Create(g_dXyPuckSpeed, 0)
			pActPuck.m_gInputWindow = g_gInputWindow
		}
		if pPlayinp.m_mpButkEdges[BUTK.Left] == EDGES.Press
		{
			pActPuck.m_vInput = F32x2Create(-g_dXyPuckSpeed, 0)
			pActPuck.m_gInputWindow = g_gInputWindow
		}

		if pPlayinp.m_mpButkEdges[BUTK.Up] == EDGES.Press
		{ 
			pActPuck.m_vInput = F32x2Create(0, g_dXyPuckSpeed)
			pActPuck.m_gInputWindow = g_gInputWindow
		}
		if pPlayinp.m_mpButkEdges[BUTK.Down] == EDGES.Press
		{ 
			pActPuck.m_vInput = F32x2Create(0, -g_dXyPuckSpeed)
			pActPuck.m_gInputWindow = g_gInputWindow
		}

		if pActPuck.m_gInputWindow > 0
		{
			posCellInput := PosCellAdvance(pActPuck.m_posCellGoal, pActPuck.m_vInput)
			if !FIsCellBlocked(posCellInput.m_x, posCellInput.m_y)	
			{
				pActPuck.m_vAfter = pActPuck.m_vInput
				pActPuck.m_vInput = F32x2Create(0, 0)
				pActPuck.m_gInputWindow = 0
			}
		}
	}
}

UpdateActorMovement proc (pAct: & SActor, dT: f32)
{
	xMapMax := cast (float) g_mapinfo.m_mapdim.m_dXCellMax * g_dXCell
	yMapMax := cast (float) g_mapinfo.m_mapdim.m_dYCellMax * g_dYCell

	pEnt := pAct.m_pEnt
	gStep := g_dXyPuckSpeed * dT

	pAct.m_gInputWindow -= gStep
	if pAct.m_gInputWindow <= 0
	{
		pAct.m_gInputWindow = 0
	}

	while gStep > gEpsilon
	{
		posTarget	:= PosFromCell(pAct.m_posCellGoal)
		vecToTarget := posTarget - pEnt.m_pos
		gDistToTarget := GLength(vecToTarget)

		// check for dist to mirrored cell
		pMapdim := &g_mapinfo.m_mapdim
		posCellMirror := pAct.m_posCellGoal
		if posCellMirror.m_x == 0
			{ posCellMirror.m_x = pMapdim.m_dXCellMax }
		if posCellMirror.m_x == pMapdim.m_dXCellMax-1
			{ posCellMirror.m_x = -1 }

		if posCellMirror.m_y == 0
			{ posCellMirror.m_y = pMapdim.m_dYCellMax }
		if posCellMirror.m_y == pMapdim.m_dYCellMax-1
			{ posCellMirror.m_y = -1 }

		posMirror	:= PosFromCell(posCellMirror)
		vecToMirror := posMirror - pEnt.m_pos
		gDistToMirror := GLength(vecToMirror)
		if (gDistToTarget > gDistToMirror)
		{
			posTarget = posMirror
			vecToTarget = vecToMirror
			gDistToTarget = gDistToMirror
		}

		if gDistToTarget >= gStep
		{
			pEnt.m_pos = pEnt.m_pos + VecNormalize(vecToTarget) * gStep
			pEnt.m_pos = PosWrap(pEnt.m_pos)
			gStep = 0
		}
		else
		{
			gStep - gDistToTarget

			if pAct.m_fHasBrain
			{
				// is there a choice to make?
				grfdir := GrfdirOpenCells(pAct.m_posCellGoal)

				// remove incoming dir
				dirIncoming := DirFromVec(-pAct.m_vAfter)
				grfdir &= FDIR.all ^ (0x1 << dirIncoming)

				// pick cell closest to the brain target (ignoring blocked cells)
				posCellNearest: s32x2
				posBrain := PosFromCell(pAct.m_posCellBrain)
				if FTryFindCellNearest(pAct.m_posCellGoal, posBrain, grfdir, &posCellNearest)
				{
					posGoal := PosFromCell(pAct.m_posCellGoal)	
					posNearest := PosFromCell(posCellNearest)	
					vecToNearest := posNearest - posGoal
					pAct.m_vAfter = VecNormalize(vecToNearest) * cast (f32) g_dXyPuckSpeed
				}
				else
				{
					pAct.m_vAfter = F32x2Create(0, 0)
				}
			}

			if GLengthSqr(pAct.m_vAfter) < gEpsilon
			{
				gStep = 0
			}
			else
			{
				posCellNew := PosCellAdvance(pAct.m_posCellGoal, pAct.m_vAfter)

				if FIsCellBlocked(posCellNew.m_x, posCellNew.m_y)	
				{
					pAct.m_vAfter = F32x2Create(0, 0)
					gStep = 0
				}
				else
				{
					pAct.m_posCellGoal = posCellNew
				}
			}
		}
	}

	//DrawCellDebug(pActPuck.m_posCellGoal, ColCreate(220, 10, 10, 200))
}

PosCellAdvance proc (posCell: s32x2, vecDir: f32x2) -> s32x2
{
	posCellRet: s32x2

	if vecDir.m_x > gEpsilon
		{ posCellRet.m_x = posCell.m_x + 1 }
	else if vecDir.m_x < -gEpsilon
		{ posCellRet.m_x = posCell.m_x - 1 }
	else
		{ posCellRet.m_x = posCell.m_x }

	if vecDir.m_y > gEpsilon
		{ posCellRet.m_y = posCell.m_y + 1 }
	else if vecDir.m_y < -gEpsilon
		{ posCellRet.m_y = posCell.m_y - 1 }
	else
		{ posCellRet.m_y = posCell.m_y }

	posCellRet.m_x = (posCellRet.m_x + g_mapinfo.m_mapdim.m_dXCellMax) % g_mapinfo.m_mapdim.m_dXCellMax
	posCellRet.m_y = (posCellRet.m_y + g_mapinfo.m_mapdim.m_dYCellMax) % g_mapinfo.m_mapdim.m_dYCellMax

	return posCellRet
}

ENTK enum // Entity kind
{
	Puck,
	Ghost,
	Coin,
	Powerup,
}

GHOSTK enum u8
{
	Blinky,	// red, target is puck's current position
	Pinky,	// pink, target is four tiles in front of puck
	Inky,	// blue, target is vector from blinky to two in front of puck, projected forward to 2x it's length
	Clyde,	// orange, same as blinky if more than 8 tiles away, otherwise scatter to the orange corner
}

g_ghostkNext: GHOSTK

GHOSTS enum u8
{
	Wait,
	Chase,		// normal chase mode
	Scatter,
	Fright,		// random walk while the puck has a power pellet
}

PUCKS enum u8
{
	Normal,
	Eating,		// Has a powerup, will eat ghosts
}

SEntity struct // tag = ent
{
	m_pos: f32x2		// center position
	m_col: SColor
	m_dX: f32
	m_dY: f32
	m_entk: ENTK
	m_fIsAllocated: bool
}

SActor struct // tag = act
{
	m_v: f32x2
	m_pEnt: & SEntity
	m_fIsAllocated: bool

	m_posCellGoal: s32x2
	m_vAfter: f32x2
	m_systState: Syst		// time that we entered this PUCKS or GHOSTS

	// ghost only values
	m_posCellBrain: s32x2
	m_fHasBrain: bool
	m_ghostk: GHOSTK = GHOSTK.nil
	m_ghosts: GHOSTS = GHOSTS.Wait
	m_cCoinWait: int

	// puck only values
	m_vInput: f32x2
	m_gInputWindow: f32		// hold the input for some distance to allow tweaking the turn-input threshold
	m_pucks: PUCKS = PUCKS.Normal

	m_nPoints: int
	m_cCoin: int
}

kDtEating :: 10.0

BUTK enum // button kind
{
	Up,
	Down,
	Left,
	Right,
	Select,
	Cancel,
}

SPlayerInput struct // tag = playinp
{
	m_mpButkEdges: [BUTK.max] EDGES
}

PActAllocate proc (aAct: [] SActor, aEnt: [] SEntity, entk: ENTK) -> & SActor
{
	pEnt := PEntAllocate(aEnt)	
	if !pEnt
		{ return null }

	pAct: & SActor
	pActMax := &aAct[aAct.count]
	for pActIt := aAct.data; pActIt != pActMax; ++pActIt
	{
		if !pActIt.m_fIsAllocated
		{
			pActIt.m_fIsAllocated = true
			pAct = pActIt
			break
		}
	}

	if !pAct
	{
		FreeEntity(pEnt)
		return null
	}

	pAct.m_pEnt = pEnt
	pEnt.m_entk = entk
	return pAct
}

FreeActor proc (pAct: & SActor)
{
	pEnt := pAct.m_pEnt
	if (pEnt.m_entk == ENTK.Puck)
	{
		if fverify(g_pActPuck == pAct, "bad global entity pointer", #file, #line)
			{ g_pActPuck = null }
	}
	else if (pAct.m_ghostk == GHOSTK.Blinky)
	{
		if fverify(g_pActBlinky == pAct, "bad global 'Blinky' pointer", #file, #line)
			{ g_pActBlinky = null }
	}

	FreeEntity(pAct.m_pEnt)
	pAct.m_fIsAllocated = false
}

FMapGridFromString proc (pChzInput: & const u8, aChMap: [] u8) -> bool
{
	//printf("%s\n", pChzInput)

	cChExpected := g_dXMapCell * g_dYMapCell
	if aChMap.count != cChExpected
	{
		return false
	}

	pChMax := &aChMap[aChMap.count]
	for pCh := aChMap.data; pCh != pChMax; ++pCh
	{
		@pCh = ' '
	}

	pChIn := pChzInput

	aChMap[(g_dYMapCell-1) * g_dXMapCell] = 'W'

	#label Outer	
	for yCell := 0; yCell < g_dYMapCell; ++yCell
	{
		for xCell := 0; true; ++xCell
		{
			// skip carriage returns
			while @pChIn == 13
				{ ++pChIn }

			ch := @pChIn
			++pChIn

			if ch == 0
				{ break Outer }

			if ch == '\n'
				{ break }

			if xCell >= g_dXMapCell
			{
				printf("map input line too long (%d, %d)\n", xCell, yCell)
				return false
			}

			if xCell < g_dXMapCell
			{
				// flip vertically
				aChMap[xCell + (g_dYMapCell - yCell - 1) * g_dXMapCell] = ch
			}
		}
	}

	return true
}

HandlePlayerInputEvent proc (pEvent: & SEvent, pPlayinp: & SPlayerInput)
{
	mpKeycodeButk: [BUTK.max] KEYCODE = 
	{	
		KEYCODE.ArrowUp, 		//Up,
		KEYCODE.ArrowDown, 		//Down,
		KEYCODE.ArrowLeft, 		//Left,
		KEYCODE.ArrowRight, 	//Right,
		KEYCODE.F2, 			//Select,
		KEYCODE.F3				//Cancel,
	}	

	for butk := BUTK.min; butk != BUTK.max; ++butk
	{
		if pEvent.m_keycode == mpKeycodeButk[butk]
		{
			pPlayinp.m_mpButkEdges[butk] = pEvent.m_edges
			return
		}
	}

}

ClearPlayerInput proc (pPlayinp: & SPlayerInput)
{
	for butk := BUTK.min; butk != butk.max; ++butk
	{
		pPlayinp.m_mpButkEdges[butk] = EDGES.Off
	}
}

FHandleEvents proc (pPlayinp: & SPlayerInput) -> bool
{
	ClearPlayerInput(pPlayinp)

	event : SEvent
	while FGetNextEvent(&event)
	{
		//printf("Event: keycode=%d, edges = %d\n", event.m_keycode, event.m_edges)
		if event.m_keycode == KEYCODE.Escape && event.m_edges == EDGES.Press
			{ return false }

		HandlePlayerInputEvent(&event, pPlayinp)
	}

	return true
}

PEntAllocate proc (aEnt: [] SEntity) -> & SEntity
{
	pEntMax := &aEnt[aEnt.count]
	for pEnt := aEnt.data; pEnt != pEntMax; ++pEnt 
	{
		if !pEnt.m_fIsAllocated
		{
			pEnt.m_fIsAllocated = true
			return pEnt
		}
	}

	return null
}

FreeEntity proc (pEnt: & SEntity)
{
	pEnt.m_fIsAllocated = false
}

AddMapEntities proc (pChzMap: & u8, aEnt: [] SEntity, aAct: [] SActor)
{
	dXStride := g_dXMapCell
	for yCell:s32 = 0; yCell < g_dYMapCell; ++yCell
	{
		y := (cast (f32)yCell + 0.5) * g_dYCell

		for xCell:s32 = 0; xCell < g_dXMapCell; ++xCell
		{
			x := (cast (f32)xCell + 0.5) * g_dXCell

			ch := pChzMap[xCell + yCell*dXStride]
			if (ch == '.')
			{
				pEnt := PEntAllocate(aEnt)
				if !fverify(pEnt, "failed to allocate new entity", #file, #line)
					{ return }

				pEnt.m_entk = ENTK.Coin
				pEnt.m_pos = F32x2Create(x, y)
				pEnt.m_col = ColCreate(117, 139, 150, 255)
				pEnt.m_dX = 10
				pEnt.m_dY = 10
			}
			else if (ch == 'o')
			{
				pEnt := PEntAllocate(aEnt)
				if !fverify(pEnt, "failed to allocate powerup", #file, #line)
					{ return }

				pEnt.m_entk = ENTK.Powerup
				pEnt.m_pos = F32x2Create(x, y)
				pEnt.m_col = ColCreate(203, 86, 98, 255)
				pEnt.m_dX = 20
				pEnt.m_dY = 20
			}
			else if (ch == 'g')
			{
				pActGhost := PActAllocate(aAct, aEnt, ENTK.Ghost)
				if !fverify(pActGhost, "failed to allocate ghost", #file, #line)
					{ return }
				pEnt := pActGhost.m_pEnt
				pEnt.m_dX = 25
				pEnt.m_dY = 25
				pEnt.m_pos = F32x2Create(x, y)
				pActGhost.m_posCellGoal = S32x2Create(xCell, yCell)
				pActGhost.m_ghostk = g_ghostkNext
				g_ghostkNext = cast (GHOSTK) ((cast (GHOSTK.loose)g_ghostkNext + 1) % cast (GHOSTK.loose) GHOSTK.max) // BB, shouldn't need these casts

				mpGhostkCoinWait := { 0, 30, 60, 90}
				pActGhost.m_cCoinWait = mpGhostkCoinWait[pActGhost.m_ghostk]

				SetGhostColor(pActGhost)
			}
			else if (ch == 'p')
			{
				pActPuck := PActAllocate(aAct, aEnt, ENTK.Puck)
				if !fverify(pActPuck, "failed to allocate puck", #file, #line)
					{ return }

				pEntPuck := pActPuck.m_pEnt
				pEntPuck.m_col = ColCreate(238, 227, 191, 255)
				pEntPuck.m_dX = 25
				pEntPuck.m_dY = 25
				pEntPuck.m_pos = F32x2Create(x, y)
				pActPuck.m_posCellGoal = S32x2Create(xCell, yCell)
				g_pActPuck = pActPuck
			}
		}
	}
}

UpdateEntities proc (aEnt: [] SEntity)
{
	for iEnt := 0; iEnt < aEnt.count; ++iEnt	
	{
		pEnt := &aEnt[iEnt]
		if !pEnt.m_fIsAllocated
			{ continue }

		// BB - this is backwards, puck should check for collisions with other stuff!

		if pEnt.m_entk == ENTK.Coin || pEnt.m_entk == ENTK.Powerup
		{
			vecToPuck := g_pActPuck.m_pEnt.m_pos - pEnt.m_pos
			if GAbs(vecToPuck.m_x) < pEnt.m_dX && GAbs(vecToPuck.m_y) < pEnt.m_dY
			{
				if pEnt.m_entk == ENTK.Coin
				{
					++g_pActPuck.m_cCoin
					g_pActPuck.m_nPoints += 10
				}
				else if pEnt.m_entk == ENTK.Powerup
				{
					SetPucks(g_pActPuck, PUCKS.Eating)
					g_pActPuck.m_nPoints += 100
				}
				FreeEntity(pEnt)	
				continue
			}
		}
	}
}

DrawEntities proc (aEnt: [] SEntity, pTilbuf: & STileVertexBuffer)
{
	for iEnt := 0; iEnt < aEnt.count; ++iEnt	
	{
		pEnt := &aEnt[iEnt]
		if !pEnt.m_fIsAllocated
			{ continue }

		dX := pEnt.m_dX
		dY := pEnt.m_dY

		xMin := pEnt.m_pos.m_x - (dX / 2)
		yMin := pEnt.m_pos.m_y - (dY / 2)

		colvec := ColvecFromCol(pEnt.m_col)

		AppendTile (xMin, yMin, xMin+dX, yMin+dY, &colvec, pTilbuf)
	}
}

DrawMapBackground proc (pChzMap: & u8, pTilbuf: & STileVertexBuffer)
{
	colvecBg := ColvecFromCol(ColCreate(19, 29, 43, 100))
	dXMax: f32 = g_dXMapCell * g_dXCell
	dYMax: f32 = g_dYMapCell * g_dYCell
	AppendTile (0, 0, dXMax, dYMax, &colvecBg, pTilbuf)

	colvecWall := ColvecFromCol(ColCreate(87, 130, 168, 255))

	dXStride := g_dXMapCell
	for yCell := 0; yCell < g_dYMapCell; ++yCell
	{
		yMin := cast (f32)yCell * g_dYCell
		yMax := yMin + g_dYCell

		for xCell := 0; xCell < g_dXMapCell; ++xCell
		{
			ch := pChzMap[xCell + yCell*dXStride]

			if ch == 'W'
			{
				xMin:= cast (f32)xCell * g_dXCell
				xMax := xMin + g_dXCell

				AppendTile (xMin, yMin, xMax, yMax, &colvecWall, pTilbuf)
			}
		}
	}
}

STileVertex struct // tag=tilvert
{
	m_x, m_y: f32
	m_u, m_v: f32
	m_r, m_g, m_b, m_a: f32
}

STileVertexBuffer struct // tag=tilbuf
{
	m_aTilvert: [4096] STileVertex
	m_cTilvert: int
}
g_tilbuf: STileVertexBuffer

AppendTile proc (
			xMin: float, yMin: float,
			xMax: float, yMax: float,
			colvec: & SColorVec,
			pTilbuf: & STileVertexBuffer)
{
	if pTilbuf.m_aTilvert.count < pTilbuf.m_cTilvert + 4
		{ return }

	AppendTilvert(
		xMin, yMax,
		0,	0,	// u, v
		colvec.m_x, colvec.m_y, colvec.m_z, colvec.m_w,
		pTilbuf)

	AppendTilvert(
		xMax, yMax,
		0,	0,	// u, v
		colvec.m_x, colvec.m_y, colvec.m_z, colvec.m_w,
		pTilbuf)

	AppendTilvert(
		xMax, yMin,
		0,	0,	// u, v
		colvec.m_x, colvec.m_y, colvec.m_z, colvec.m_w,
		pTilbuf)

	AppendTilvert(
		xMin, yMin,
		0,	0,	// u, v
		colvec.m_x, colvec.m_y, colvec.m_z, colvec.m_w,
		pTilbuf)
}

AppendTilvert proc (
				x: float, y: float, 
				u: float, v: float, 
				r: float, g: float, b: float, a: float, 
				pTilbuf: & STileVertexBuffer) inline
{
	pTilvert: & STileVertex = &pTilbuf.m_aTilvert[pTilbuf.m_cTilvert]
	++pTilbuf.m_cTilvert

	pTilvert.m_x = x
	pTilvert.m_y = y

	pTilvert.m_u = u
	pTilvert.m_v = v

	pTilvert.m_r = r
	pTilvert.m_g = g
	pTilvert.m_b = b
	pTilvert.m_a = a
}

FlushTileVerts proc (pDrac: & SDrawContext, pTilbuf: & STileVertexBuffer)
{
	aTilvert: [] STileVertex = pTilbuf.m_aTilvert

	// push orthographic projection
	glPushMatrix()
	glLoadIdentity()

	// set scissor rect

	// set up shader
	//glEnable(GL_BLEND)
	//glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
	assert(pDrac.m_pShman != null, "NULL GContext in flushTileVerts", #file, #line)
	BeginShader(pDrac.m_pShman, pDrac.m_pShman.m_mpCoreshkShhand[CORESHK.Sprite])

	//pTex := pFontman.m_aFont[fontk].m_pTex
	//SetShaderParam(pFontman.m_mpFontshkIParamTex[iShhand], pTex, 0)

	pTilvert := &aTilvert[0]
	glVertexPointer(3, GL_FLOAT, cast (s32) sizeof(STileVertex), &aTilvert[0].m_x)
	glEnableClientState(GL_VERTEX_ARRAY)
			
	glColorPointer(4, GL_FLOAT, cast (s32) sizeof(STileVertex), &aTilvert[0].m_r)
	glEnableClientState(GL_COLOR_ARRAY)

	glClientActiveTexture(GL_TEXTURE0)
	glTexCoordPointer(2, GL_FLOAT, cast (s32) sizeof(STileVertex), &aTilvert[0].m_u)
	glEnableClientState(GL_TEXTURE_COORD_ARRAY)

	glDrawArrays(GL_QUADS, 0, cast (s32) pTilbuf.m_cTilvert)

	//if (pTex)
	//{
	//	glDisable(pTex.m_druTarget)
	//}

	glDisableClientState(GL_VERTEX_ARRAY)
	glDisableClientState(GL_COLOR_ARRAY)	
	glDisableClientState(GL_TEXTURE_COORD_ARRAY)

	EndShader()

	glPopMatrix()

	pTilbuf.m_cTilvert = 0
}	

DrawTestTriangle proc (gRadians:float)
{
	dRad :: kPi * 2.0 / 3.0
	vecCenter := F32x2Create(g_dXWindow / 2.0, g_dYWindow / 2.0)
	vecRadius := F32x2Create(300, 0)
	vecA := VecRotate(gRadians, vecRadius)
	vecB := VecRotate(gRadians + dRad, vecRadius)
	vecC := VecRotate(gRadians + (2.0 * dRad), vecRadius)
	z := 0.0

	vecA += vecCenter
	vecB += vecCenter
	vecC += vecCenter

    glBegin(GL_TRIANGLES)
    glColor3f(1, 0, 0)
    glVertex3f(vecA.m_x, vecA.m_y, z)
    glColor3f(0, 1, 0)
    glVertex3f(vecB.m_x, vecB.m_y, z)
    glColor3f(0, 0, 1)
    glVertex3f(vecC.m_x, vecC.m_y, z)
    glEnd()
}

DTElapsed proc (cTickStart: s64, cTickEnd: s64) -> f32 inline
{
    return cast (f32)(cTickEnd - cTickStart) / cast(f32)g_cTickPerSecond
}

g_rng: SRandomGen

main proc () -> int
{
	pWindow : HWND
	CreateWindow(g_dXWindow, g_dYWindow, "Puck", &pWindow)

	pDrac := PDracStaticInit(PVAllocDefault)
	if !pDrac
	{
		return 0
	}

	pDrac.m_pDras.m_fontd.m_gCharSize = 20

	SetupOrthoViewport(0, 0, g_dXWindow, g_dYWindow)

	SeedRandom(&g_rng, 0xBADDBEEF)

    dRadSpin :: 0.01
    gRadSpin: float

    // Make sure sleep has 1ms granularity
    s_cMsDesiredGranularity :: 1
    fIsSleepGranular := FTrySetTimerResolution(s_cMsDesiredGranularity)
    g_cTickPerSecond = CTickPerSecond() 

    nHzMonitorRefresh : s32 = GetMonitorRefresh(pWindow)
    nHzTarget := cast (f32)(nHzMonitorRefresh)
  	printf("%d %f\n", nHzMonitorRefresh, nHzTarget)

    dTFrameTarget := 1.0 / nHzTarget
	aChStatus: [512] u8

	aChMap: [g_dXMapCell * g_dYMapCell] u8
	fIsValidMap := FMapGridFromString (g_pChzMap, aChMap)
	if !fIsValidMap
	{
		assert(fIsValidMap, "bad map grid", #file, #line)
		return 0
	}

	aEnt: [512] SEntity
	aAct: [32] SActor
	AddMapEntities(aChMap, aEnt, aAct)

    //mapdim: SMapDimensions
    g_mapinfo.m_aChMap = aChMap
    pMapdim := &g_mapinfo.m_mapdim

    pMapdim.m_dXStride = g_dXMapCell
    pMapdim.m_dXCellMax = g_dXMapCell
    pMapdim.m_dYCellMax = g_dYMapCell

	playinp: SPlayerInput 
	ClearPlayerInput(&playinp)

	cTickLast := CTickWallClock()
	fShouldClose := false
	dTGame: f32
	while fShouldClose == false
	{
		fShouldClose |= !FHandleEvents(&playinp)

		gRadSpin += dRadSpin

		DrawMapBackground(aChMap, &g_tilbuf)
		DrawEntities(aEnt, &g_tilbuf)

		FlushTileVerts(pDrac, &g_tilbuf)
		FlushFontVerts(pDrac, &g_Fvbuf)

		//DrawTestTriangle(gRadSpin)

        SwapBuffers(pWindow)
		ClearWindow(0, 0, 0, 1)

        UpdateWindowEvents()

        UpdateActors(aAct, &playinp, dTGame)
		//UpdatePuck(g_pActPuck, &playinp, dTGame, aChMap, &mapdim)
		UpdateEntities(aEnt)

// 		if !s_fIsPaused
	    {
	    	cTickWork := CTickWallClock()
	    	dTWorkElapsed := DTElapsed(cTickLast, cTickWork)

	        dTElapsedFrame := dTWorkElapsed
	        if dTElapsedFrame < dTFrameTarget
	        {                        
	            if fIsSleepGranular
	            {
	                SleepMS := cast (u32)(1000.0 * (dTFrameTarget - dTElapsedFrame))
	                if SleepMS > 0
	                {
	                    Sleep(SleepMS)
	                }
	            }

	            while dTElapsedFrame < dTFrameTarget
	            {                            
	                dTElapsedFrame = DTElapsed(cTickLast, CTickWallClock())
	            }
	        }
	    }

	    cTickEnd := CTickWallClock()
	    dTFrameActual := DTElapsed(cTickLast, cTickEnd)
	    cTickLast = cTickEnd

	    nHzActual := 1 / dTFrameActual
	    snprintf(aChStatus, aChStatus.count, "%0.1f / %0.1f, %0.2f ms", nHzActual, nHzTarget, dTFrameActual * 1000)
		DrawText(pDrac, F32x2Create(20, g_dYWindow - 35), aChStatus)

	    snprintf(aChStatus, aChStatus.count, "%d points", g_pActPuck.m_nPoints) 
		DrawText(pDrac, F32x2Create(400, g_dYWindow - 35), aChStatus)

		dTGame = dTFrameActual
		g_systCur += dTGame
	}
	return 1
}