
CCh :: (pChz: & u8) -> int
{
	return strlen(pChz);
}

// simple hash function with meh avalanching, works for now. replace with MUM hash or xxHash
HvHashFVN :: (pV: &void, cB: s32) -> u32
{
	pB := cast (& u8) pV;
    hv: u32 = 2166136261;

    i: int;
    while (i < cB)
    {
        hv = (hv * 16777619) ^ pB[i];
        ++i;
    }

    return hv;
}

HvHashFVNLower :: (pV: & void, cB: int) -> u32
{
	pB := cast (& u8) pV;
    hv: u32 = 2166136261;

    i: int;
    while (i < cB)
    {
        hv = (hv * 16777619) ^ cast (u8) tolower(pB[i]);
        ++i;
    }

    return hv;
}

SStringHash :: struct	// tag = shash
{
	m_hv: u32;
	m_pChzUnsafe: &u8;	// debug only string pointer
}

ShashCreate :: (pChz: &u8, cCh: int) -> SStringHash
{
	if (cCh <= 0)
	{
		cCh = CCh(pChz);	
	}
	shash: SStringHash = ---;
	shash.m_hv = HvHashFVN(pChz, cCh);
	shash.m_pChzUnsafe = pChz;

	return shash;
}

FAreEqual :: (shashLhs: SStringHash, shashRhs: SStringHash) -> bool
{
	return shashLhs.m_hv == shashRhs.m_hv;	
}
